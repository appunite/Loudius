plugins {
    id 'com.android.application'
    id 'kotlin-kapt'
    id 'org.jetbrains.kotlin.android'
    id 'org.jlleitschuh.gradle.ktlint' version '11.6.1'
    id 'org.jetbrains.kotlin.plugin.serialization' version '1.9.0'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

android {
    namespace 'com.appunite.loudius'

    defaultConfig {
        applicationId "com.appunite.loudius"
        minSdk 24
        compileSdk 34
        targetSdk 34
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "com.appunite.loudius.util.InstrumentationTestRunner"
        testInstrumentationRunnerArguments clearPackageData: 'true'
        vectorDrawables {
            useSupportLibrary true
        }
        if (System.env.LOUDIUS_CLIENT_SECRET == null || System.env.LOUDIUS_CLIENT_SECRET.isEmpty()) {
            logger.warn("You need to set LOUDIUS_CLIENT_SECRET in your environment variables")
        }
        buildConfigField "String", "LOUDIUS_CLIENT_SECRET", "\"${System.env.LOUDIUS_CLIENT_SECRET}\""
        if (System.env.LOUDIUS_CLIENT_ID == null || System.env.LOUDIUS_CLIENT_ID.isEmpty()) {
            logger.warn("You need to set LOUDIUS_CLIENT_ID in your environment variables")
        }
        buildConfigField "String", "LOUDIUS_CLIENT_ID", "\"${System.env.LOUDIUS_CLIENT_ID}\""
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        coreLibraryDesugaringEnabled true
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion '1.5.0'
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
            excludes += '/META-INF/LICENSE.md'
            excludes += '/META-INF/LICENSE-notice.md'
        }
    }
    testOptions {
        execution 'ANDROIDX_TEST_ORCHESTRATOR'

        packagingOptions {
            jniLibs {
                useLegacyPackaging true
            }
        }
        unitTests {
            includeAndroidResources = true
            animationsDisabled = true
            all {
                // Disable tests on release because on release we don't have TestActivity.
                // We could also filter tasks by filter {}, but right now we don't need to test
                // release version.
                if (it.name == 'testReleaseUnitTest') {
                    it.enabled = false
                }
            }
        }
    }
    kapt {
        arguments {
            arg("skipPrivatePreviews", "true")
        }
    }
}

dependencies {
    api project(':components')
    //Desugaring for use of java.time in api lower then 26
    coreLibraryDesugaring libs.desugar

    //Base android deps
    implementation libs.androidx.ktx
    implementation libs.androidx.lifecycle
    implementation libs.androidx.activity.compose

    // Orchestrator
    androidTestImplementation libs.androidx.test.runner
    androidTestUtil libs.androidx.test.orchestartor

    //Compose
    def composeBom = platform(libs.compose.bom)
    implementation composeBom
    androidTestImplementation composeBom
    implementation libs.compose.material3
    implementation libs.compose.material
    implementation libs.compose.ui
    implementation libs.compose.ui.preview
    implementation libs.compose.navigation
    debugImplementation 'androidx.compose.ui:ui-tooling'
    debugImplementation 'androidx.compose.ui:ui-test-manifest'

    //Showkase
    implementation libs.showkase
    kapt libs.showkase.processor

    // koin
    api "io.insert-koin:koin-core:3.5.0"
    api "io.insert-koin:koin-test:3.5.0"
    api "io.insert-koin:koin-test-junit4:3.5.0"
    api "io.insert-koin:koin-android:3.5.0"
    api "io.insert-koin:koin-android-test:3.5.0"
    api "io.insert-koin:koin-androidx-compose:3.5.0"

    //coroutines
    implementation libs.coroutines.android
    testImplementation libs.coroutines.test

    // ktor
    implementation libs.ktor.client.core
    implementation libs.ktor.client.okhttp
    implementation libs.ktor.client.content.negotation
    implementation libs.ktor.serilization.json
    testImplementation libs.ktor.client.mock

    implementation(libs.kotlinx.serialization.json)
    implementation(libs.kotlinx.datetime)
    testImplementation(libs.kotlinx.datetime)

    //okhttp
    implementation libs.okhttp3.okhttp
    implementation libs.okhttp3.logging.interceptor

    testImplementation project(":app-shared-tests")
    androidTestImplementation(project(":app-shared-tests")) {
        exclude group: 'org.robolectric', module: 'robolectric'
    }

    androidTestImplementation libs.mockk
    androidTestImplementation libs.androidx.test.uiautomator

    // ktlint
    ktlintRuleset project(":custom-ktlint-rules")
}

tasks.withType(Test) {
    useJUnitPlatform()
}

kapt {
    correctErrorTypes true
}
