plugins {
    alias(libs.plugins.android.application)
    alias(libs.plugins.kotlin.kapt)
    alias(libs.plugins.kotlin.android)
    alias(libs.plugins.ktlint.gradle)
    alias(libs.plugins.kotlin.serialization)
    id 'jacoco'
}

def fileName = "../app/google-services.json"

if (project.file(fileName).exists()) {
    apply {
        plugin(libs.plugins.google.services.get().getPluginId())
    }
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

android {
    namespace 'com.appunite.loudius'

    defaultConfig {
        applicationId "com.appunite.loudius"
        minSdk 24
        compileSdk 34
        targetSdk 34
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "com.appunite.loudius.util.InstrumentationTestRunner"
        testInstrumentationRunnerArguments clearPackageData: 'true', coverage: 'true', coverageFilePath: '/sdcard/Download/'
        vectorDrawables {
            useSupportLibrary true
        }
        if (System.env.LOUDIUS_CLIENT_SECRET == null || System.env.LOUDIUS_CLIENT_SECRET.isEmpty()) {
            logger.warn("You need to set LOUDIUS_CLIENT_SECRET in your environment variables")
        }
        buildConfigField "String", "LOUDIUS_CLIENT_SECRET", "\"${System.env.LOUDIUS_CLIENT_SECRET}\""
        if (System.env.LOUDIUS_CLIENT_ID == null || System.env.LOUDIUS_CLIENT_ID.isEmpty()) {
            logger.warn("You need to set LOUDIUS_CLIENT_ID in your environment variables")
        }
        buildConfigField "String", "LOUDIUS_CLIENT_ID", "\"${System.env.LOUDIUS_CLIENT_ID}\""
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug{
            enableUnitTestCoverage true
            testCoverageEnabled true
        }
    }
    compileOptions {
        coreLibraryDesugaringEnabled true
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion '1.5.0'
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
            excludes += '/META-INF/LICENSE.md'
            excludes += '/META-INF/LICENSE-notice.md'
            excludes += '/META-INF/versions/9/previous-compilation-data.bin'
        }
    }
    testOptions {
        execution 'ANDROIDX_TEST_ORCHESTRATOR'

        packagingOptions {
            jniLibs {
                useLegacyPackaging true
            }
        }
        unitTests {
            includeAndroidResources = true
            animationsDisabled = true
            all {
                // Disable tests on release because on release we don't have TestActivity.
                // We could also filter tasks by filter {}, but right now we don't need to test
                // release version.
                if (it.name == 'testReleaseUnitTest') {
                    it.enabled = false
                }
            }
        }
    }
    kapt {
        arguments {
            arg("skipPrivatePreviews", "true")
        }
    }
}

tasks.register('codeCoverage', JacocoReport) {
    dependsOn 'testDebugUnitTest'

    reports {
        html.required.set(true)
        xml.required.set(true)
    }

    classDirectories.setFrom(
            fileTree(project.buildDir) {
                include("**/tmp/kotlin-classes/debug/**")
                exclude(
                        '**/R.class',
                        '**/R$*.class',
                        '**/BuildConfig.*',
                        "**/*Application.*",
                        '**/Manifest*.*',
                        '**/*Test*.*',
                        '**/android/**/*.*',
                        '**/androidx/**/*.*',
                        '**/airbnb/**/*.*',
                        "**/di/**/*.*",
                        '**/*Dagger*.*',
                        "**/*Screen*"
                )
            }
    )

    sourceDirectories.setFrom(fileTree(
            dir: project.projectDir,
            includes: [
                    "src/main/java/**",
                    "src/main/kotlin/**"
            ]))

    executionData.setFrom(fileTree(
            dir: project.buildDir,
            includes: [
                    "**/*.exec",
                    "**/*.ec",
                    "**/**/*.exec",
                    "**/**/*.ec",
            ]))

}

tasks.register('instrumentationCodeCoverage', JacocoReport) {

    reports {
        html.required.set(true)
        xml.required.set(true)
    }

    classDirectories.setFrom(
            fileTree(project.buildDir) {
                include("**/tmp/kotlin-classes/debug/**")
                exclude(
                        '**/R.class',
                        '**/R$*.class',
                        '**/BuildConfig.*',
                        "**/*Application.*",
                        '**/Manifest*.*',
                        '**/*Test*.*',
                        '**/android/**/*.*',
                        '**/androidx/**/*.*',
                        '**/airbnb/**/*.*',
                        "**/di/**/*.*",
                        '**/*Dagger*.*',
                        "**/*Screen*"
                )
            }
    )

    sourceDirectories.setFrom(fileTree(
            dir: project.projectDir,
            includes: [
                    "src/main/java/**",
                    "src/main/kotlin/**"
            ]))

    executionData.setFrom(
            fileTree(dir: "${buildDir}/test-results/instrumentation_results", includes: ['*.ec']))
}

dependencies {
    api project(':components')

    // Desugaring for use of java.time in api lower then 26
    coreLibraryDesugaring(libs.desugar)

    // Base android deps
    implementation(libs.bundles.androidx)

    // Orchestrator
    androidTestImplementation(libs.androidx.test.runner)
    androidTestUtil(libs.androidx.test.orchestartor)

    // Compose
    def composeBom = platform(libs.compose.bom)
    implementation(composeBom)
    androidTestImplementation(composeBom)
    implementation(libs.bundles.compose)
    implementation(libs.compose.navigation)
    debugImplementation(libs.bundles.composeDebug)

    // Showkase
    implementation(libs.showkase)
    kapt(libs.showkase.processor)

    // Koin
    api(libs.bundles.koin)

    // Coroutines
    implementation(libs.coroutines.android)
    testImplementation(libs.coroutines.test)

    // Ktor
    implementation(libs.bundles.ktor)
    testImplementation(libs.ktor.client.mock)

    // Util
    implementation(libs.bundles.kotlinx)
    testImplementation(libs.kotlinx.datetime)

    // OkHttp
    implementation(libs.bundles.okhttp)

    // Testing
    testImplementation project(":app-shared-tests")
    androidTestImplementation(project(":app-shared-tests")) {
        exclude group: 'org.robolectric', module: 'robolectric'
    }

    androidTestImplementation(libs.mockk)
    androidTestImplementation(libs.androidx.test.uiautomator)

    // Ktlint
    ktlintRuleset project(":custom-ktlint-rules")

    // Firebase
    implementation(platform(libs.firebase.bom))
    implementation(libs.firebase.analytics)
}

tasks.withType(Test) {
    useJUnitPlatform()
}

kapt {
    correctErrorTypes true
}
