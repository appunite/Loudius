plugins {
    id 'com.android.application'
    id 'kotlin-kapt'
    id 'org.jetbrains.kotlin.android'
    id 'org.jlleitschuh.gradle.ktlint' version '11.6.1'
    id 'org.jetbrains.kotlin.plugin.serialization' version '1.9.0'
}

def fileName = "../app/google-services.json"

if (project.file(fileName).exists()) {
    apply plugin: 'com.google.gms.google-services'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

android {
    namespace 'com.appunite.loudius'

    defaultConfig {
        applicationId "com.appunite.loudius"
        minSdk 24
        compileSdk 34
        targetSdk 34
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "com.appunite.loudius.util.InstrumentationTestRunner"
        testInstrumentationRunnerArguments clearPackageData: 'true'
        vectorDrawables {
            useSupportLibrary true
        }
        if (System.env.LOUDIUS_CLIENT_SECRET == null || System.env.LOUDIUS_CLIENT_SECRET.isEmpty()) {
            logger.warn("You need to set LOUDIUS_CLIENT_SECRET in your environment variables")
        }
        buildConfigField "String", "LOUDIUS_CLIENT_SECRET", "\"${System.env.LOUDIUS_CLIENT_SECRET}\""
        if (System.env.LOUDIUS_CLIENT_ID == null || System.env.LOUDIUS_CLIENT_ID.isEmpty()) {
            logger.warn("You need to set LOUDIUS_CLIENT_ID in your environment variables")
        }
        buildConfigField "String", "LOUDIUS_CLIENT_ID", "\"${System.env.LOUDIUS_CLIENT_ID}\""
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        coreLibraryDesugaringEnabled true
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion '1.5.0'
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
            excludes += '/META-INF/LICENSE.md'
            excludes += '/META-INF/LICENSE-notice.md'
            excludes += '/META-INF/versions/9/previous-compilation-data.bin'
        }
    }
    testOptions {
        execution 'ANDROIDX_TEST_ORCHESTRATOR'

        packagingOptions {
            jniLibs {
                useLegacyPackaging true
            }
        }
        unitTests {
            includeAndroidResources = true
            animationsDisabled = true
            all {
                // Disable tests on release because on release we don't have TestActivity.
                // We could also filter tasks by filter {}, but right now we don't need to test
                // release version.
                if (it.name == 'testReleaseUnitTest') {
                    it.enabled = false
                }
            }
        }
    }
    kapt {
        arguments {
            arg("skipPrivatePreviews", "true")
        }
    }
}

dependencies {
    api project(':components')
    //Desugaring for use of java.time in api lower then 26
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:2.0.3'

    //Base android deps
    implementation 'androidx.core:core-ktx:1.12.0'
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.6.2'
    implementation 'androidx.activity:activity-compose:1.8.0'

    // Orchestrator
    androidTestImplementation 'androidx.test:runner:1.5.2'
    androidTestUtil 'androidx.test:orchestrator:1.4.2'

    //Compose
    def composeBom = platform('androidx.compose:compose-bom:2023.10.01')
    implementation composeBom
    androidTestImplementation composeBom
    implementation 'androidx.compose.material3:material3'
    implementation 'androidx.compose.material:material'
    implementation 'androidx.compose.ui:ui'
    implementation 'androidx.compose.ui:ui-tooling-preview'
    implementation "androidx.navigation:navigation-compose:2.7.4"
    debugImplementation 'androidx.compose.ui:ui-tooling'
    debugImplementation 'androidx.compose.ui:ui-test-manifest'

    //Showkase
    implementation "com.airbnb.android:showkase:1.0.2"
    kapt "com.airbnb.android:showkase-processor:1.0.2"

    // koin
    api "io.insert-koin:koin-core:$koin_version"
    api "io.insert-koin:koin-test:$koin_version"
    api "io.insert-koin:koin-test-junit4:$koin_version"
    api "io.insert-koin:koin-android:$koin_version"
    api "io.insert-koin:koin-android-test:$koin_version"
    api "io.insert-koin:koin-androidx-compose:$koin_version"

    //coroutines
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.7.2'
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:1.7.3"

    // ktor
    implementation "io.ktor:ktor-client-core:$ktor_version"
    implementation "io.ktor:ktor-client-okhttp:$ktor_version"
    implementation "io.ktor:ktor-client-content-negotiation:$ktor_version"
    implementation "io.ktor:ktor-serialization-kotlinx-json:$ktor_version"
    testImplementation("io.ktor:ktor-client-mock:$ktor_version")

    implementation("org.jetbrains.kotlinx:kotlinx-serialization-json:1.6.0")
    implementation("org.jetbrains.kotlinx:kotlinx-datetime:0.4.1")
    testImplementation("org.jetbrains.kotlinx:kotlinx-datetime:0.4.1")


    //retrofit & okhttp
    implementation 'com.squareup.okhttp3:okhttp:4.11.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.10.0'

    testImplementation project(":app-shared-tests")
    androidTestImplementation(project(":app-shared-tests")) {
        exclude group: 'org.robolectric', module: 'robolectric'
    }

    androidTestImplementation "io.mockk:mockk-android:1.13.3"
    androidTestImplementation('androidx.test.uiautomator:uiautomator:2.3.0-alpha03')

    // ktlint
    ktlintRuleset project(":custom-ktlint-rules")

    // Firebase
    implementation(platform("com.google.firebase:firebase-bom:32.4.0"))
    implementation("com.google.firebase:firebase-analytics-ktx")
}

tasks.withType(Test) {
    useJUnitPlatform()
}

kapt {
    correctErrorTypes true
}
