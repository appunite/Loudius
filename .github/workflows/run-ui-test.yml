name: Android Release

on:
  pull_request:
  push:
    branches:
      - "develop"
      - "main"
  schedule:
    # Run twice a day the sanity check, at 9:13 and 21:13.
    # You ask why 13? because probably less people schedule their tasks at exactly this time, so I
    # guess CI is less occupied. And 13 is a lucky number ;)
    - cron: "13 9,21 * * *"

permissions: read-all

jobs:
  apk:
    name: Run UI tests on Firebase Test Lab
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install Python dependencies
        uses: py-actions/py-dependency-install@v4
        with:
          path: "build-tools/requirements.txt"

      - id: auth
        name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.SERVICE_ACCOUNT }}

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.x

      - name: Get previous workflow run details
        id: get_previous_run
        run: |
          import os
          import requests

          github_token = os.getenv('GITHUB_TOKEN')
          owner = os.getenv('GITHUB_REPOSITORY_OWNER')
          repo = os.getenv('GITHUB_REPOSITORY')
          workflow_name = 'Android Release'  # Replace with your workflow name
          per_page = 1  # Number of workflow runs to fetch

          headers = {
              'Authorization': f'Bearer {github_token}',
              'Accept': 'application/vnd.github.v3+json'
          }

          # Get the previous workflow run details
          response = requests.get(
              f'https://api.github.com/repos/{owner}/{repo}/actions/workflows',
              headers=headers,
              params={'per_page': per_page}
          )
          response.raise_for_status()
          data = response.json()

          if data['total_count'] > 0:
              previous_run = data['workflows'][0]
              print(f"Previous workflow run ID: {previous_run['id']}")
              print(f"Previous workflow run status: {previous_run['status']}")

              # Get the workflow job runs for the previous run
              job_runs_response = requests.get(
                  f'https://api.github.com/repos/{owner}/{repo}/actions/runs/{previous_run["id"]}/jobs',
                  headers=headers
              )
              job_runs_response.raise_for_status()
              job_runs_data = job_runs_response.json()

              # Extract the testMatrixId from the workflow job runs
              test_matrix_id = next(
                  (step['outputs']['testMatrixId'] for job in job_runs_data['jobs'] for step in job['steps'] if step['name'] == 'Run tests on Firebase Test Lab'),
                  None
              )
              print(f"Previous testMatrixId: {test_matrix_id}")

              # Set the output variable
              print(f"::set-output name=testMatrixId::{test_matrix_id}")
          else:
              print("No previous workflow runs found.")

      - name: Cancel previous test run on Firebase Test Lab
        if: steps.get_previous_run.outputs.testMatrixId != ''
        run: |
          gcloud firebase test android matrices cancel ${{ steps.get_previous_run.outputs.testMatrixId }}

      - name: Prepare Android Environment
        uses: ./.github/actions/prepare-android-env

      - name: Assemble App Debug APK and Android Instrumentation Tests
        run: ./gradlew assembleDebug assembleDebugAndroidTest

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          install_components: "gsutil"

      - id: generate-dir
        name: Generate random directory
        run: |-
          echo "results_dir=$(date +%F_%T)-${RANDOM}" >> "$GITHUB_OUTPUT"
          echo "bucket=test-lab-07qs3ns6c51bi-iazpthysivhkq" >> "$GITHUB_OUTPUT"

      - name: Run tests on Firebase Test Lab
        run: |-
          gcloud firebase test android run ".github/tests.yml:android-pixel-2" --results-dir="${{ steps.generate-dir.outputs.results_dir }}" --results-bucket="${{ steps.generate-dir.outputs.bucket }}"

      - name: Upload to Big Query
        if: always()
        run: |-
          mkdir "build/test-results"
          gsutil cp -r "gs://${{ steps.generate-dir.outputs.bucket }}/${{ steps.generate-dir.outputs.results_dir }}/Pixel2-30-en-portrait/test_result_1.xml" "build/test-results/results.xml"
          if [[ "${{ github.event_name }}" != "pull_request" ]]; then
            python "build-tools/upload-junit-to-cloud.py" --final
          else
            python "build-tools/upload-junit-to-cloud.py"
          fi
